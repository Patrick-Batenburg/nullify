// Code generated by mockery. DO NOT EDIT.

package null

import (
	driver "database/sql/driver"

	mock "github.com/stretchr/testify/mock"

	null "github.com/Patrick-Batenburg/nullify/null"
)

// MockGenericNullable is an autogenerated mock type for the GenericNullable type
type MockGenericNullable[T interface{}] struct {
	mock.Mock
}

type MockGenericNullable_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockGenericNullable[T]) EXPECT() *MockGenericNullable_Expecter[T] {
	return &MockGenericNullable_Expecter[T]{mock: &_m.Mock}
}

// Equal provides a mock function with given fields: other
func (_m *MockGenericNullable[T]) Equal(other null.NullableImpl[T]) bool {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for Equal")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(null.NullableImpl[T]) bool); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockGenericNullable_Equal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Equal'
type MockGenericNullable_Equal_Call[T interface{}] struct {
	*mock.Call
}

// Equal is a helper method to define mock.On call
//   - other null.NullableImpl[T]
func (_e *MockGenericNullable_Expecter[T]) Equal(other interface{}) *MockGenericNullable_Equal_Call[T] {
	return &MockGenericNullable_Equal_Call[T]{Call: _e.mock.On("Equal", other)}
}

func (_c *MockGenericNullable_Equal_Call[T]) Run(run func(other null.NullableImpl[T])) *MockGenericNullable_Equal_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(null.NullableImpl[T]))
	})
	return _c
}

func (_c *MockGenericNullable_Equal_Call[T]) Return(_a0 bool) *MockGenericNullable_Equal_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGenericNullable_Equal_Call[T]) RunAndReturn(run func(null.NullableImpl[T]) bool) *MockGenericNullable_Equal_Call[T] {
	_c.Call.Return(run)
	return _c
}

// IsValid provides a mock function with given fields:
func (_m *MockGenericNullable[T]) IsValid() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsValid")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockGenericNullable_IsValid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValid'
type MockGenericNullable_IsValid_Call[T interface{}] struct {
	*mock.Call
}

// IsValid is a helper method to define mock.On call
func (_e *MockGenericNullable_Expecter[T]) IsValid() *MockGenericNullable_IsValid_Call[T] {
	return &MockGenericNullable_IsValid_Call[T]{Call: _e.mock.On("IsValid")}
}

func (_c *MockGenericNullable_IsValid_Call[T]) Run(run func()) *MockGenericNullable_IsValid_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGenericNullable_IsValid_Call[T]) Return(_a0 bool) *MockGenericNullable_IsValid_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGenericNullable_IsValid_Call[T]) RunAndReturn(run func() bool) *MockGenericNullable_IsValid_Call[T] {
	_c.Call.Return(run)
	return _c
}

// IsZero provides a mock function with given fields:
func (_m *MockGenericNullable[T]) IsZero() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsZero")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockGenericNullable_IsZero_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsZero'
type MockGenericNullable_IsZero_Call[T interface{}] struct {
	*mock.Call
}

// IsZero is a helper method to define mock.On call
func (_e *MockGenericNullable_Expecter[T]) IsZero() *MockGenericNullable_IsZero_Call[T] {
	return &MockGenericNullable_IsZero_Call[T]{Call: _e.mock.On("IsZero")}
}

func (_c *MockGenericNullable_IsZero_Call[T]) Run(run func()) *MockGenericNullable_IsZero_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGenericNullable_IsZero_Call[T]) Return(_a0 bool) *MockGenericNullable_IsZero_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGenericNullable_IsZero_Call[T]) RunAndReturn(run func() bool) *MockGenericNullable_IsZero_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MarshalJSON provides a mock function with given fields:
func (_m *MockGenericNullable[T]) MarshalJSON() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalJSON")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGenericNullable_MarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalJSON'
type MockGenericNullable_MarshalJSON_Call[T interface{}] struct {
	*mock.Call
}

// MarshalJSON is a helper method to define mock.On call
func (_e *MockGenericNullable_Expecter[T]) MarshalJSON() *MockGenericNullable_MarshalJSON_Call[T] {
	return &MockGenericNullable_MarshalJSON_Call[T]{Call: _e.mock.On("MarshalJSON")}
}

func (_c *MockGenericNullable_MarshalJSON_Call[T]) Run(run func()) *MockGenericNullable_MarshalJSON_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGenericNullable_MarshalJSON_Call[T]) Return(_a0 []byte, _a1 error) *MockGenericNullable_MarshalJSON_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGenericNullable_MarshalJSON_Call[T]) RunAndReturn(run func() ([]byte, error)) *MockGenericNullable_MarshalJSON_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MarshalText provides a mock function with given fields:
func (_m *MockGenericNullable[T]) MarshalText() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MarshalText")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGenericNullable_MarshalText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarshalText'
type MockGenericNullable_MarshalText_Call[T interface{}] struct {
	*mock.Call
}

// MarshalText is a helper method to define mock.On call
func (_e *MockGenericNullable_Expecter[T]) MarshalText() *MockGenericNullable_MarshalText_Call[T] {
	return &MockGenericNullable_MarshalText_Call[T]{Call: _e.mock.On("MarshalText")}
}

func (_c *MockGenericNullable_MarshalText_Call[T]) Run(run func()) *MockGenericNullable_MarshalText_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGenericNullable_MarshalText_Call[T]) Return(_a0 []byte, _a1 error) *MockGenericNullable_MarshalText_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGenericNullable_MarshalText_Call[T]) RunAndReturn(run func() ([]byte, error)) *MockGenericNullable_MarshalText_Call[T] {
	_c.Call.Return(run)
	return _c
}

// MustValue provides a mock function with given fields:
func (_m *MockGenericNullable[T]) MustValue() T {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MustValue")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// MockGenericNullable_MustValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MustValue'
type MockGenericNullable_MustValue_Call[T interface{}] struct {
	*mock.Call
}

// MustValue is a helper method to define mock.On call
func (_e *MockGenericNullable_Expecter[T]) MustValue() *MockGenericNullable_MustValue_Call[T] {
	return &MockGenericNullable_MustValue_Call[T]{Call: _e.mock.On("MustValue")}
}

func (_c *MockGenericNullable_MustValue_Call[T]) Run(run func()) *MockGenericNullable_MustValue_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGenericNullable_MustValue_Call[T]) Return(_a0 T) *MockGenericNullable_MustValue_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGenericNullable_MustValue_Call[T]) RunAndReturn(run func() T) *MockGenericNullable_MustValue_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Ptr provides a mock function with given fields:
func (_m *MockGenericNullable[T]) Ptr() *T {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ptr")
	}

	var r0 *T
	if rf, ok := ret.Get(0).(func() *T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	return r0
}

// MockGenericNullable_Ptr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ptr'
type MockGenericNullable_Ptr_Call[T interface{}] struct {
	*mock.Call
}

// Ptr is a helper method to define mock.On call
func (_e *MockGenericNullable_Expecter[T]) Ptr() *MockGenericNullable_Ptr_Call[T] {
	return &MockGenericNullable_Ptr_Call[T]{Call: _e.mock.On("Ptr")}
}

func (_c *MockGenericNullable_Ptr_Call[T]) Run(run func()) *MockGenericNullable_Ptr_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGenericNullable_Ptr_Call[T]) Return(_a0 *T) *MockGenericNullable_Ptr_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGenericNullable_Ptr_Call[T]) RunAndReturn(run func() *T) *MockGenericNullable_Ptr_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function with given fields: src
func (_m *MockGenericNullable[T]) Scan(src interface{}) error {
	ret := _m.Called(src)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGenericNullable_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockGenericNullable_Scan_Call[T interface{}] struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - src interface{}
func (_e *MockGenericNullable_Expecter[T]) Scan(src interface{}) *MockGenericNullable_Scan_Call[T] {
	return &MockGenericNullable_Scan_Call[T]{Call: _e.mock.On("Scan", src)}
}

func (_c *MockGenericNullable_Scan_Call[T]) Run(run func(src interface{})) *MockGenericNullable_Scan_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockGenericNullable_Scan_Call[T]) Return(err error) *MockGenericNullable_Scan_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGenericNullable_Scan_Call[T]) RunAndReturn(run func(interface{}) error) *MockGenericNullable_Scan_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SetValue provides a mock function with given fields: value
func (_m *MockGenericNullable[T]) SetValue(value T) {
	_m.Called(value)
}

// MockGenericNullable_SetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetValue'
type MockGenericNullable_SetValue_Call[T interface{}] struct {
	*mock.Call
}

// SetValue is a helper method to define mock.On call
//   - value T
func (_e *MockGenericNullable_Expecter[T]) SetValue(value interface{}) *MockGenericNullable_SetValue_Call[T] {
	return &MockGenericNullable_SetValue_Call[T]{Call: _e.mock.On("SetValue", value)}
}

func (_c *MockGenericNullable_SetValue_Call[T]) Run(run func(value T)) *MockGenericNullable_SetValue_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockGenericNullable_SetValue_Call[T]) Return() *MockGenericNullable_SetValue_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockGenericNullable_SetValue_Call[T]) RunAndReturn(run func(T)) *MockGenericNullable_SetValue_Call[T] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalJSON provides a mock function with given fields: data
func (_m *MockGenericNullable[T]) UnmarshalJSON(data []byte) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalJSON")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGenericNullable_UnmarshalJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalJSON'
type MockGenericNullable_UnmarshalJSON_Call[T interface{}] struct {
	*mock.Call
}

// UnmarshalJSON is a helper method to define mock.On call
//   - data []byte
func (_e *MockGenericNullable_Expecter[T]) UnmarshalJSON(data interface{}) *MockGenericNullable_UnmarshalJSON_Call[T] {
	return &MockGenericNullable_UnmarshalJSON_Call[T]{Call: _e.mock.On("UnmarshalJSON", data)}
}

func (_c *MockGenericNullable_UnmarshalJSON_Call[T]) Run(run func(data []byte)) *MockGenericNullable_UnmarshalJSON_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockGenericNullable_UnmarshalJSON_Call[T]) Return(err error) *MockGenericNullable_UnmarshalJSON_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGenericNullable_UnmarshalJSON_Call[T]) RunAndReturn(run func([]byte) error) *MockGenericNullable_UnmarshalJSON_Call[T] {
	_c.Call.Return(run)
	return _c
}

// UnmarshalText provides a mock function with given fields: data
func (_m *MockGenericNullable[T]) UnmarshalText(data []byte) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for UnmarshalText")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGenericNullable_UnmarshalText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalText'
type MockGenericNullable_UnmarshalText_Call[T interface{}] struct {
	*mock.Call
}

// UnmarshalText is a helper method to define mock.On call
//   - data []byte
func (_e *MockGenericNullable_Expecter[T]) UnmarshalText(data interface{}) *MockGenericNullable_UnmarshalText_Call[T] {
	return &MockGenericNullable_UnmarshalText_Call[T]{Call: _e.mock.On("UnmarshalText", data)}
}

func (_c *MockGenericNullable_UnmarshalText_Call[T]) Run(run func(data []byte)) *MockGenericNullable_UnmarshalText_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockGenericNullable_UnmarshalText_Call[T]) Return(err error) *MockGenericNullable_UnmarshalText_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGenericNullable_UnmarshalText_Call[T]) RunAndReturn(run func([]byte) error) *MockGenericNullable_UnmarshalText_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Value provides a mock function with given fields:
func (_m *MockGenericNullable[T]) Value() (driver.Value, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Value")
	}

	var r0 driver.Value
	var r1 error
	if rf, ok := ret.Get(0).(func() (driver.Value, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() driver.Value); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Value)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGenericNullable_Value_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Value'
type MockGenericNullable_Value_Call[T interface{}] struct {
	*mock.Call
}

// Value is a helper method to define mock.On call
func (_e *MockGenericNullable_Expecter[T]) Value() *MockGenericNullable_Value_Call[T] {
	return &MockGenericNullable_Value_Call[T]{Call: _e.mock.On("Value")}
}

func (_c *MockGenericNullable_Value_Call[T]) Run(run func()) *MockGenericNullable_Value_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGenericNullable_Value_Call[T]) Return(_a0 driver.Value, _a1 error) *MockGenericNullable_Value_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGenericNullable_Value_Call[T]) RunAndReturn(run func() (driver.Value, error)) *MockGenericNullable_Value_Call[T] {
	_c.Call.Return(run)
	return _c
}

// ValueOrZero provides a mock function with given fields:
func (_m *MockGenericNullable[T]) ValueOrZero() T {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValueOrZero")
	}

	var r0 T
	if rf, ok := ret.Get(0).(func() T); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(T)
	}

	return r0
}

// MockGenericNullable_ValueOrZero_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValueOrZero'
type MockGenericNullable_ValueOrZero_Call[T interface{}] struct {
	*mock.Call
}

// ValueOrZero is a helper method to define mock.On call
func (_e *MockGenericNullable_Expecter[T]) ValueOrZero() *MockGenericNullable_ValueOrZero_Call[T] {
	return &MockGenericNullable_ValueOrZero_Call[T]{Call: _e.mock.On("ValueOrZero")}
}

func (_c *MockGenericNullable_ValueOrZero_Call[T]) Run(run func()) *MockGenericNullable_ValueOrZero_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGenericNullable_ValueOrZero_Call[T]) Return(_a0 T) *MockGenericNullable_ValueOrZero_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGenericNullable_ValueOrZero_Call[T]) RunAndReturn(run func() T) *MockGenericNullable_ValueOrZero_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockGenericNullable creates a new instance of MockGenericNullable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGenericNullable[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGenericNullable[T] {
	mock := &MockGenericNullable[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
